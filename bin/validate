#!/usr/bin/env node

var Crypto = require('crypto');
var Fs = require('fs');
var Os = require('os');
var Path = require('path');
var Spawn = require('child_process').spawn;
var Utils = require('../lib/utils');

var internals = {
    pathSep: process.platform === 'win32' ? ';' : ':',
    longest: 0
};

if ((process.stdout &&
     process.stdout.isTTY) ||
     process.platform === 'win32' ||
     process.env.COLORTERM ||
     /^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {

    internals.failed = '\x1B[31mfailed!\x1B[39m';
    internals.passed = '\x1B[32mok\x1B[39m';
    internals.missing = '\x1B[33mn/a\x1B[39m (no script found)';
}
else {
    internals.failed = 'failed!';
    internals.passed = 'ok';
    internals.missing = 'n/a (no script found)';
}


// Create a copy of process.env, with the PATH environment variable
// (case insensitive) modified to include the given project's
// node_modules/.bin directory.
internals.getEnv = function (projectRoot) {

    var env = {};

    for (var key in process.env) {
        if (key.toLowerCase() === 'path') {
            env[key] = Path.join(projectRoot, 'node_modules', '.bin') + internals.pathSep;
            env[key] += Path.resolve(__dirname, '..', '..', '.bin') + internals.pathSep;
            env[key] += process.env[key];
            if (process.env.TERM === 'cygwin') {
                env[key] = env[key].replace(/(:)?\\/g, '/').split(internals.pathSep).map(function (segment) { return '/' + segment; }).join(':');
            }
        }
        else {
            env[key] = process.env[key];
        }
    }

    return env;
};


// Actually run the given script for the given project
internals.runCmd = function (projectRoot, env, name, script, done) {

    done = internals.tasks.length ? internals.tasks.shift() : process.exit;
    var pad = '';
    for (var i = 0, il = internals.longest - name.length; i < il; ++i) {
        pad += ' ';
    }

    if (!script) {
        console.log('running %s: %s%s', name, pad, internals.missing);
        return internals.exit(0, done);
    }

    var logPath = Path.join(Os.tmpdir(), Crypto.pseudoRandomBytes(16).toString('hex'));
    var logFile = Fs.createWriteStream(logPath);

    process.stdout.write('running ' + name + ': ' + pad);
    var cmd = 'sh';
    var args = ['-c', script];

    logFile.on('open', function () {

        var hookProcess = Spawn(cmd, args, { stdio: [null, logFile, logFile], env: env, cwd: projectRoot});
        hookProcess.on('close', function (code) {

            if (code === 0) {
                console.log(internals.passed);
                Fs.unlinkSync(logPath);
                return internals.exit(0, done);
            }

            console.log(internals.failed);
            logFile = Fs.createReadStream(logPath);
            logFile.on('end', function () {

                Fs.unlinkSync(logPath);
                internals.exit(code, process.exit);
            });

            logFile.pipe(process.stdout);
        });
    });
}


// This method shamelessly adapted from https://github.com/cowboy/node-exit
internals.exit = function (code, callback) {
    var streams = [process.stdout, process.stderr];
    var drainCount = 0;

    function tryToExit() {
        if (drainCount === streams.length) {
            callback(code);
        }
    }

    streams.forEach(function (stream) {
        if (stream.bufferSize === 0) {
            drainCount++;
        } else {
            stream.write('', 'utf-8', function () {
                drainCount++;
                tryToExit();
            });

            stream.write = function () {};
        }
    });

    tryToExit();

    // In Windows, when run as a Node.js child process, a script utilizing
    // this library might just exit with a 0 exit code, regardless. This code,
    // despite the fact that it looks a bit crazy, appears to fix that
    process.on('exit', function() {
        process.exit(exitCode);
    });
}


var hook = Path.basename(process.argv[1]);
var projects = Utils.findProjects();

internals.tasks = [];

for (var i = 0, il = projects.length; i < il; ++i) {
    var project = projects[i];

    var env = internals.getEnv(project);
    var config = Fs.existsSync(Path.join(project, '.validate.json')) ? require(Path.join(project, '.validate.json')) : {};
    var pkg = require(Path.join(project, 'package.json'));
    var scripts = pkg[hook] || config[hook] || [];

    if (scripts.length) {
        if (il > 1) {
            console.log('running %s checks for %s...', hook, Path.basename(project));
        }
        else {
            console.log('running %s checks...', hook);
        }
    }

    var tasks = [];

    for (var m = 0, ml = scripts.length; m < ml; ++m) {
        var script = scripts[m];
        var command = (pkg.scripts || {})[script] || (config.scripts || {})[script] || '';
        internals.longest = (internals.longest < script.length) ? script.length : internals.longest;

        var task = internals.runCmd.bind(null, project, env, script, command);
        tasks[m] = task;
    }

    internals.tasks = internals.tasks.concat(tasks);
}

if (internals.tasks.length) {
    var task = internals.tasks.shift();
    task();
}
